Agent1- Keyword Generation

# To run this code you need to install the following dependencies:
# pip install google-genai

import base64
import os
from google import genai
from google.genai import types


def generate():
    client = genai.Client(
        api_key=os.environ.get("GEMINI_API_KEY"),
    )

    model = "gemini-2.0-flash"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text="""INSERT_INPUT_HERE"""),
            ],
        ),
    ]
    generate_content_config = types.GenerateContentConfig(
        response_mime_type="application/json",
        response_schema=genai.types.Schema(
            type = genai.types.Type.OBJECT,
            required = ["items"],
            properties = {
                "items": genai.types.Schema(
                    type = genai.types.Type.ARRAY,
                    items = genai.types.Schema(
                        type = genai.types.Type.OBJECT,
                        required = ["item_name", "item_search_keyword"],
                        properties = {
                            "item_name": genai.types.Schema(
                                type = genai.types.Type.STRING,
                            ),
                            "item_search_keyword": genai.types.Schema(
                                type = genai.types.Type.STRING,
                            ),
                        },
                    ),
                ),
            },
        ),
        system_instruction=[
            types.Part.from_text(text="""You are an agent that focuses on generating turkish keywords to search for grocery market items with.

Assume the person doesnt need tools.

Try to reduce variants but if needed add them. For Example:
Red Meat = Lamb, Beef

Your results for each item should be in a json array and for each shop item you will add \"akakce\" at the start"""),
        ],
    )

    for chunk in client.models.generate_content_stream(
        model=model,
        contents=contents,
        config=generate_content_config,
    ):
        print(chunk.text, end="")

if __name__ == "__main__":
    generate()



Agent2 - General Crawl results

# To run this code you need to install the following dependencies:
# pip install google-genai

import base64
import os
from google import genai
from google.genai import types


def generate():
    client = genai.Client(
        api_key=os.environ.get("GEMINI_API_KEY"),
    )

    model = "gemini-2.0-flash"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text="""INSERT_INPUT_HERE"""),
            ],
        ),
    ]
    generate_content_config = types.GenerateContentConfig(
        response_mime_type="application/json",
        response_schema=genai.types.Schema(
            type = genai.types.Type.OBJECT,
            required = ["products"],
            properties = {
                "products": genai.types.Schema(
                    type = genai.types.Type.ARRAY,
                    items = genai.types.Schema(
                        type = genai.types.Type.OBJECT,
                        required = ["product_name", "product_cost", "product_link"],
                        properties = {
                            "product_name": genai.types.Schema(
                                type = genai.types.Type.STRING,
                            ),
                            "product_cost": genai.types.Schema(
                                type = genai.types.Type.STRING,
                            ),
                            "product_link": genai.types.Schema(
                                type = genai.types.Type.STRING,
                            ),
                        },
                    ),
                ),
            },
        ),
        system_instruction=[
            types.Part.from_text(text="""You are a parse helper agent that is tasked to retrieve a products name its cost and the store page link it has.

When looking for the store page its more likely that its the link with the name of the product included. Example:
Name = Banvit Pili√ß
Link.../banvit-pilic/...html

You are meant to put the result in a structured JSON format"""),
        ],
    )

    for chunk in client.models.generate_content_stream(
        model=model,
        contents=contents,
        config=generate_content_config,
    ):
        print(chunk.text, end="")

if __name__ == "__main__":
    generate()


Agent3 Specific Crawl Results

# To run this code you need to install the following dependencies:
# pip install google-genai

import base64
import os
from google import genai
from google.genai import types


def generate():
    client = genai.Client(
        api_key=os.environ.get("GEMINI_API_KEY"),
    )

    model = "gemini-2.0-flash"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text="""INSERT_INPUT_HERE"""),
            ],
        ),
    ]
    generate_content_config = types.GenerateContentConfig(
        response_mime_type="application/json",
        response_schema=genai.types.Schema(
            type = genai.types.Type.OBJECT,
            required = ["product_name", "product_cost", "product_stores"],
            properties = {
                "product_name": genai.types.Schema(
                    type = genai.types.Type.STRING,
                ),
                "product_cost": genai.types.Schema(
                    type = genai.types.Type.STRING,
                ),
                "product_stores": genai.types.Schema(
                    type = genai.types.Type.ARRAY,
                    items = genai.types.Schema(
                        type = genai.types.Type.OBJECT,
                        required = ["store_name", "store_cost"],
                        properties = {
                            "store_name": genai.types.Schema(
                                type = genai.types.Type.STRING,
                            ),
                            "store_cost": genai.types.Schema(
                                type = genai.types.Type.STRING,
                            ),
                        },
                    ),
                ),
            },
        ),
        system_instruction=[
            types.Part.from_text(text="""You are a parsing agent thats focused on retrieving a products name price and what stores its available on. 
The markdown youre provided with is on a singular product and you should focus on the said product. 
When writing down the store only write the store name. Nothing more
You need to write your output in a JSON format."""),
        ],
    )

    for chunk in client.models.generate_content_stream(
        model=model,
        contents=contents,
        config=generate_content_config,
    ):
        print(chunk.text, end="")

if __name__ == "__main__":
    generate()
